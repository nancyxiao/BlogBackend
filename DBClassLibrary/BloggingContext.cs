// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DBClassLibrary
{
    public partial class BloggingContext : DbContext
    {
        public BloggingContext()
        {
        }

        public BloggingContext(DbContextOptions<BloggingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ArticleTagsDetail> ArticleTagsDetail { get; set; }
        public virtual DbSet<Articles> Articles { get; set; }
        public virtual DbSet<ClassAll> ClassAll { get; set; }
        public virtual DbSet<ForgotPwdRecords> ForgotPwdRecords { get; set; }
        public virtual DbSet<LoginRecords> LoginRecords { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<Menus> Menus { get; set; }
        public virtual DbSet<RoleMenuMapping> RoleMenuMapping { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Tags> Tags { get; set; }
        public virtual DbSet<UserIntroduction> UserIntroduction { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source==***********\\\\SQLEXPRESS;Initial Catalog=******;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ArticleTagsDetail>(entity =>
            {
                entity.HasKey(e => new { e.ArticleId, e.TagId });

                entity.Property(e => e.ArticleId)
                    .HasColumnName("ArticleID")
                    .HasMaxLength(26)
                    .IsUnicode(false);

                entity.Property(e => e.TagId)
                    .IsRequired()
                    .HasColumnName("TagID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

            });

            modelBuilder.Entity<Articles>(entity =>
            {
                entity.HasKey(e => e.ArticleId)
                    .HasName("PK_ArticleIs");

                entity.Property(e => e.ArticleId)
                    .HasColumnName("ArticleID")
                    .HasMaxLength(26)
                    .IsUnicode(false);

                entity.Property(e => e.ClassId)
                    .HasColumnName("ClassID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UserId)
                    .IsRequired()
                    .HasColumnName("UserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ClassAll>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.ClassId });

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.ClassId)
                    .HasColumnName("ClassID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.ClassName).HasMaxLength(10);
            });

            modelBuilder.Entity<ForgotPwdRecords>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SendTime).HasColumnType("datetime");

                entity.Property(e => e.Token).HasMaxLength(100);

                entity.Property(e => e.UserEmail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LoginRecords>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginTime });

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LoginTime).HasColumnType("datetime");

                entity.Property(e => e.LoginState).HasMaxLength(20);
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UserEmail)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserName).HasMaxLength(50);

                entity.Property(e => e.UserPwd)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Menus>(entity =>
            {
                entity.HasKey(e => e.MenuId);

                entity.Property(e => e.MenuId)
                    .HasColumnName("MenuID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Action)
                    .HasMaxLength(15)
                    .IsUnicode(false);

                entity.Property(e => e.Controller)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.MenuName).HasMaxLength(50);

                entity.Property(e => e.ParentId)
                    .HasColumnName("ParentID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.Platform).HasMaxLength(2);

                entity.Property(e => e.Url)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RoleMenuMapping>(entity =>
            {
                entity.HasKey(e => new { e.RoleId, e.MenuId });

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.MenuId)
                    .HasColumnName("MenuID")
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.RoleId);

                entity.Property(e => e.RoleId)
                    .HasColumnName("RoleID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName).HasMaxLength(10);
                entity.Property(e => e.Platform).HasMaxLength(2);
            });

            modelBuilder.Entity<Tags>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.TagId });

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.TagId)
                    .HasColumnName("TagID")
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.TagName).HasMaxLength(15);
            });

            modelBuilder.Entity<UserIntroduction>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.Property(e => e.UserId)
                    .HasColumnName("UserID")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Photo).HasMaxLength(200);
                entity.Property(e => e.LocalPath).HasMaxLength(200);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}